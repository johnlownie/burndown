package ca.jetsphere.core.jdbc;

import ca.jetsphere.core.common.Common;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Hashtable;

/**
 *
 */

public class Connection extends Status
{
    String ds; DataSource dataSource; java.sql.Connection connection;

    /**
     *
     */

    public Connection ( Object object )

    { super ( object ); setDataSourceName ( "jdbc/connection" ); }

    /**
     *
     */

    public void close()

    { try { if ( connection != null && ! connection.isClosed() ) { connection.close(); super.close(); } } catch ( SQLException e ) {} connection = null; }

    /**
     *
     */

    public void commit() throws SQLException { if ( ! isClosed() ) connection.commit(); }

    /**
     *
     */

    public Statement createStatement() throws NamingException, SQLException { if ( isClosed() ) open(); return new Statement ( connection ); }

    /**
     *
     */

    protected java.sql.Connection getConnection() throws NamingException, SQLException { return getConnection ( "jdbc/connection" ); }

    /**
     *
     */

    synchronized protected java.sql.Connection getConnection ( String ds ) throws NamingException, SQLException

    { return getTomcatConnection ( ds ); }
    /**
     *
     */

    synchronized protected java.sql.Connection getAccessConnection() throws NamingException, SQLException
    {
    String url = "jdbc:odbc:Providers";

    try {

        Class.forName ( "sun.jdbc.odbc.JdbcOdbcDriver" );

    } catch ( ClassNotFoundException e ) { System.err.println ( "JdbcOdbc Bridge Driver not found!" ); return null; }

    return DriverManager.getConnection(url, "", "");
    }

    /**
     *
     */

    protected java.sql.Connection getTomcatConnection ( String ds ) throws NamingException, SQLException
    {
    this.dataSource = getDataSource ( ds );

    connection = this.dataSource.getConnection();

    if ( connection == null )

        throw new SQLException ( "No Database Connection" );

//    return new net.sf.log4jdbc.ConnectionSpy ( connection );

    return connection;
    }

    /**
     *
     */

    protected DataSource getDataSource ( String ds ) throws NamingException, SQLException

    { return  getTomcatDataSource ( ds ); }

    /**
     *
     */

    protected String getDataSourceName() { return ds; }

    /**
     *
     */

    protected DataSource getDataSource ( Context context, String ds ) throws NamingException, SQLException
    {
    if ( context == null )

        throw new SQLException ( "No Initial Context [ java:comp/env ]" );

    DataSource dataSource = ( DataSource ) context.lookup ( ds );

    if ( dataSource == null )

        throw new SQLException ( "No Data Source : " + ds );

    return dataSource;
    }

    /**
     *
     */

    protected DataSource getTomcatDataSource ( String ds ) throws NamingException, SQLException
    {
    Context context = ( Context ) new InitialContext().lookup ( "java:comp/env" );

    return getDataSource ( context, ds );
    }

    /**
     *
     */

    protected DataSource getWebSphereDataSource ( String ds ) throws NamingException, SQLException
    {
    Hashtable environment = new Hashtable();

    environment.put ( Context.INITIAL_CONTEXT_FACTORY, "com.ibm.websphere.naming.WsnInitialContextFactory" );

    InitialContext context = new InitialContext ( environment );

    return getDataSource ( context, ds );
    }

    /**
     *
     */

    public boolean isClosed() throws SQLException

    { return connection != null ? connection.isClosed() : true; }

    /**
     *
     */

    public boolean isReadOnly()

    { try { return connection.isReadOnly(); } catch ( SQLException e ) { return false; } }

    /**
     *
     */

    public void open() throws NamingException, SQLException

    { connection = getConnection ( getDataSourceName() ); super.open(); }

    /**
     *
     */

    public PreparedStatement prepareStatement() throws NamingException, SQLException

    { if ( isClosed() ) open(); return new PreparedStatement ( connection ); }

    /**
     *
     */

    public PreparedStatement prepareStatement ( String sql ) throws NamingException, SQLException

    { if ( isClosed() ) open(); return new PreparedStatement ( connection, sql ); }

    /**
     *
     */

    public PreparedStatement prepareStatement ( String sql, String[] autoGeneratedColumns ) throws NamingException, SQLException

    { PreparedStatement ps = prepareStatement(); ps.setStatement ( sql, autoGeneratedColumns ); return ps; }

    /**
     *
     */

    public void rollback() { try { connection.rollback(); } catch ( SQLException e ) { Common.trace ( e ); } }

    /**
     *
     */

    public void setAutoCommit ( boolean autoCommit ) throws NamingException, SQLException

    { if ( isClosed() ) open(); connection.setAutoCommit ( autoCommit ); }

    /**
     *
     */

    public void setDataSourceName ( String ds ) { this.ds = ds; }

}