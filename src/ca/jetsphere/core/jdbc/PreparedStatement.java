package ca.jetsphere.core.jdbc;

import ca.jetsphere.core.common.Common;
import ca.jetsphere.core.common.DockYard;

import java.net.URL;
import java.sql.*;

/**
 *
 */

public class PreparedStatement
{
    java.sql.Connection connection; java.sql.PreparedStatement ps; String sql; String[] autoGeneratedColumns;

    /**
     *
     */

    static public final int CLOSE_ALL_RESULTS     = java.sql.PreparedStatement.CLOSE_ALL_RESULTS     ;
    static public final int CLOSE_CURRENT_RESULT  = java.sql.PreparedStatement.CLOSE_CURRENT_RESULT  ;
    static public final int EXECUTE_FAILED        = java.sql.PreparedStatement.EXECUTE_FAILED        ;
    static public final int KEEP_CURRENT_RESULT   = java.sql.PreparedStatement.KEEP_CURRENT_RESULT   ;
    static public final int NO_GENERATED_KEYS     = java.sql.PreparedStatement.NO_GENERATED_KEYS     ;
    static public final int RETURN_GENERATED_KEYS = java.sql.PreparedStatement.RETURN_GENERATED_KEYS ;
    static public final int SUCCESS_NO_INFO       = java.sql.PreparedStatement.SUCCESS_NO_INFO       ;

    /**
     *
     */

    public PreparedStatement ( java.sql.Connection connection ) { this.connection = connection; }

    /**
     *
     */

    public PreparedStatement ( java.sql.Connection connection, String sql ) throws SQLException

    { this ( connection ); setStatement ( sql ); }

    /**
     *
     */

    public void addBatch() throws SQLException { ps.addBatch(); }

    /**
     *
     */

    public void close() throws SQLException { if ( ps != null ) ps.close(); }

    /**
     *
     */

    public boolean closed() { return ps == null; }

    /**
     *
     */

    public void executeBatch() throws SQLException { ps.executeBatch(); }

    /**
     *
     */

    public ResultSet executeQuery() throws SQLException { setReadOnly ( sql ); return ps.executeQuery(); }

    /**
     *
     */

    public int executeUpdate() throws SQLException { setReadOnly ( sql ); return ps.executeUpdate(); }

    /**
     *
     */

    protected void finalize() throws SQLException { close(); }

    /**
     *
     */

    public ResultSet getGeneratedKeys() throws SQLException { return ps.getGeneratedKeys(); }

    /**
     *
     */

    public boolean hasAutoGeneratedColumns() { return autoGeneratedColumns != null; }

    /**
     *
     */

    public void open() throws SQLException

    { this.ps = hasAutoGeneratedColumns() ? open ( autoGeneratedColumns ) : connection.prepareStatement ( sql ); }

    /**
     *
     */

    public java.sql.PreparedStatement open ( String[] autoGeneratedColumns ) throws SQLException

    { try { return  connection.prepareStatement ( sql, autoGeneratedColumns ); } catch ( SQLException e ) { return connection.prepareStatement ( sql ); } }

    /**
     *
     */

    public void setStatement ( String sql ) throws SQLException { if ( closed() ) { this.sql = sql; open(); } }

    /**
     *
     */

    public void setStatement ( String sql, String[] autoGeneratedColumns ) throws SQLException

    { if ( closed() ) { this.sql = sql; this.autoGeneratedColumns = autoGeneratedColumns; open(); } }

    /**
     *
     */

    public void setBlob      ( int i, Blob      x ) throws SQLException { ps.setBlob      ( i, x ); }
    public void setBoolean   ( int i, boolean   x ) throws SQLException { ps.setBoolean   ( i, x ); }
    public void setDate      ( int i, Date      x ) throws SQLException { ps.setDate      ( i, x ); }
    public void setDouble    ( int i, double    x ) throws SQLException { ps.setDouble    ( i, x ); }
    public void setFloat     ( int i, float     x ) throws SQLException { ps.setFloat     ( i, x ); }
    public void setInt       ( int i, int       x ) throws SQLException { ps.setInt       ( i, x ); }
    public void setLong      ( int i, long      x ) throws SQLException { ps.setLong      ( i, x ); }
    public void setShort     ( int i, short     x ) throws SQLException { ps.setShort     ( i, x ); }
    public void setString    ( int i, String    x ) throws SQLException { ps.setString    ( i, x ); }
    public void setTime      ( int i, Time      x ) throws SQLException { ps.setTime      ( i, x ); }
    public void setTimestamp ( int i, Timestamp x ) throws SQLException { ps.setTimestamp ( i, x ); }
    public void setURL       ( int i, URL       x ) throws SQLException { ps.setURL       ( i, x ); }

    /**
     *
     */

    public void setReadOnly ( String sql ) throws SQLException
    {
//    connection.setReadOnly ( DockYard.isInsertUpdateDelete ( sql ) ? false : true );

    Common.debug ( (connection.isReadOnly() ? "[ PREPARED READONLY ]" : "[ PREPARED READ/WRITE ]" ) + " QUERY: " + sql);
    }

}
